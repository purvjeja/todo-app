{"version":3,"sources":["todo.js","App.js","index.js"],"names":["Todo","useState","todoArrayObject","setTodoArrayObject","displayArray","setDisplayArray","InputFields","id","type","placeholder","onClick","AddCurrentGoal","ListArea","listItems","map","displayArrayItem","index","CreateComponent","content","check","status","currentGoal","document","getElementById","value","length","alert","props","className","changeCheckBox","defaultChecked","deleteList","thisComponentId","i","splice","remove","j","filterStatus","displayType","filtered","filter","FilterButtons","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.8b0b25e9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './todo.css';\n\nexport default function Todo(){\n    let [todoArrayObject,setTodoArrayObject] = useState([]);\n    let [displayArray,setDisplayArray] = useState([]);\n\n    const InputFields = () => {\n        return (\n            <div>\n                <input id=\"currentInput\" type=\"text\" placeholder=\" Add Your Goal\" />\n                <button id=\"addButton\" onClick={AddCurrentGoal}><b>+</b></button>\n            </div>\n        )\n    }\n\n    const ListArea = () => {\n        let  listItems = \n        displayArray.map((displayArrayItem,index) => <div key={index}> <CreateComponent  id={displayArrayItem.id} content={displayArrayItem.content} check={displayArrayItem.status}/></div>); \n        return (\n            <div id=\"listArea\"> \n                {listItems}\n            </div>\n        )\n    }\n    const AddCurrentGoal = () => {\n        const currentGoal = document.getElementById('currentInput').value;\n        if(!currentGoal){ alert(\"You are trying to add nothing!\"); return; }\n        setTodoArrayObject([{id : todoArrayObject.length , content : currentGoal , status : false},...todoArrayObject]);\n        setDisplayArray([{id : todoArrayObject.length , content : currentGoal , status : false},...todoArrayObject]);\n    }\n\n    const CreateComponent = (props) => {\n        \n        return (\n            <div id = {props.id} className=\"listBody\">\n                <div className=\"listComponentCheckBox\"><input className=\"checkbox\" type=\"checkbox\" onClick={() => {changeCheckBox(props.id)}} defaultChecked={props.check}/></div>\n                <div className=\"listComponentName\"><h2>{props.content}</h2></div>\n                <div className=\"listComponentCrossButton\"><button  onClick={() => {deleteList(props.id)}}><b>X</b></button></div>\n            </div>\n        )\n    }\n\n    const changeCheckBox = (thisComponentId) => {\n        \n        for(let i of todoArrayObject){\n            if(thisComponentId === i.id){\n                i.status =!(i.status);\n                break;\n            }\n        } \n    }\n\n    const deleteList = (thisComponentId) => {\n        \n        for(let i in todoArrayObject){\n            if(thisComponentId === todoArrayObject[i].id){ \n                todoArrayObject.splice(i,1);\n                document.getElementById(thisComponentId).remove();\n                break; \n            }\n        }\n        for(let j in displayArray){\n            if(thisComponentId === displayArray[j].id){ \n                displayArray.splice(j,1);\n                break; \n            }\n        }\n    }\n\n\n    const filterStatus = (displayType) => {\n        if(displayType === \"active\") {\n            let filtered = todoArrayObject.filter(function(value){\n                if(value.status === false) return value;\n                return false;\n            });\n            setDisplayArray(filtered);\n            if(filtered.length === 0 && todoArrayObject.length > 0) {alert(\"Hurray, You have completed all of your tasks, And you don't have any active tasks left!\"); return;}\n        }\n        else if(displayType === \"completed\") {\n            let filtered = todoArrayObject.filter(function(value){\n                if(value.status === true) return value;\n                return false;\n            });\n            setDisplayArray(filtered);\n            if(filtered.length === 0 && todoArrayObject.length > 0) {alert(\"You haven't completed any of your tasks!\"); return;}\n        }\n        else {\n            setDisplayArray(todoArrayObject);\n        }\n    }\n\n    const FilterButtons = () => {\n        return (\n            <div className=\"filterButtons\">\n                <button onClick={ () => {filterStatus(\"all\")}}>All</button>\n                <button onClick={ () => {filterStatus(\"active\")}}>Active</button>\n                <button onClick={ () => {filterStatus(\"completed\")}}>Completed</button>\n      \n            </div>\n        )       \n    }\n    return (\n        <div id=\"body\">\n            <h1>List Your Today's Goal</h1>\n            <InputFields />\n            <ListArea />\n            <FilterButtons />\n        </div>    \n    )\n}","import Todo from \"./todo.js\" \n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}